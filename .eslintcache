[{"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/reportWebVitals.js":"1","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/App.js":"2","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/index.js":"3","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Controls.js":"4","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Clock.js":"5","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/utils.js":"6","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/AudioAnalyser.js":"7","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/AudioVisualiser.js":"8","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Fader.js":"9","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Meter.js":"10","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Panner.js":"11","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Channel.js":"12","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Track.js":"13","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Mixer.js":"14"},{"size":362,"mtime":1611525355760,"results":"15","hashOfConfig":"16"},{"size":1833,"mtime":1612019486085,"results":"17","hashOfConfig":"16"},{"size":500,"mtime":1611525355757,"results":"18","hashOfConfig":"16"},{"size":458,"mtime":1611531687999,"results":"19","hashOfConfig":"16"},{"size":1212,"mtime":1611543945032,"results":"20","hashOfConfig":"16"},{"size":3794,"mtime":1611532647041,"results":"21","hashOfConfig":"16"},{"size":1101,"mtime":1611544801634,"results":"22","hashOfConfig":"16"},{"size":1111,"mtime":1611545277878,"results":"23","hashOfConfig":"16"},{"size":785,"mtime":1612017862082,"results":"24","hashOfConfig":"16"},{"size":2854,"mtime":1611595617711,"results":"25","hashOfConfig":"16"},{"size":2509,"mtime":1611609514698,"results":"26","hashOfConfig":"16"},{"size":1015,"mtime":1611596687244,"results":"27","hashOfConfig":"16"},{"size":256,"mtime":1611596811319,"results":"28","hashOfConfig":"16"},{"size":1173,"mtime":1612019367454,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6ni04",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/reportWebVitals.js",[],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/App.js",["63"],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/index.js",[],["64","65"],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Controls.js",[],["66","67"],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Clock.js",[],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/utils.js",[],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/AudioAnalyser.js",[],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/AudioVisualiser.js",[],["68","69"],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Fader.js",["70"],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Meter.js",["71"],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Panner.js",["72"],"import React, { useState } from \"react\";\n\nimport { scale } from \"../utils\";\n\nconst Panner = () => {\n  const [pan, setPan] = useState(0);\n  const [pannerDeg, setPannerDeg] = useState(0);\n  const [pannerCanDrag, setPannerCanDrag] = useState(false);\n  const [dragState, setDragState] = useState({\n    width: null,\n    height: null,\n    offset: { left: null, top: null },\n    x: null,\n    y: null,\n  });\n\n  const handleDrag = (e) => {\n    if (!pannerCanDrag) {\n      return;\n    }\n\n    const touch = e.type === \"touchmove\" && e.originalEvent.changedTouches;\n    const top = touch && touch[0] ? touch[0].pageY : e.pageY;\n    const left = touch && touch[0] ? touch[0].pageX : e.pageX;\n    const a = dragState.offset.left + dragState.width / 2 - parseInt(left);\n    const b = dragState.offset.top + dragState.height / 2 - parseInt(top);\n    const deg = -1 * Math.atan2(a, b) * (180 / Math.PI);\n\n    if (deg >= -150 && deg <= 150) {\n      setPannerDeg(deg);\n      setPan(scale(deg, -150, 150, -1, 1));\n    }\n  };\n\n  const enableDrag = (e) => {\n    let newDragState = {};\n    const elem = e.target;\n    setPannerCanDrag(true);\n    newDragState.width = parseInt(elem.offsetWidth);\n    newDragState.height = parseInt(elem.offsetHeight);\n    newDragState.offset = {\n      top: parseInt(elem.getBoundingClientRect().top),\n      left: parseInt(elem.getBoundingClientRect().left),\n    };\n    if (e.type === \"touchstart\" && e.originalEvent.changedTouches) {\n      const touch = e.originalEvent.changedTouches[0];\n      newDragState.x = touch.pageX;\n      newDragState.y = touch.pageY;\n    } else {\n      newDragState.x = e.pageX;\n      newDragState.y = e.pageY;\n    }\n    setDragState(newDragState);\n  };\n\n  const disableDrag = () => {\n    if (pannerCanDrag) {\n      setPannerCanDrag(false);\n    }\n  };\n\n  const resetPanner = () => {\n    setPannerDeg(0);\n    setPan(0);\n  };\n\n  return (\n    <div className=\"pan\">\n      <div\n        className=\"panner\"\n        onMouseDown={enableDrag}\n        onTouchStart={enableDrag}\n        onDoubleClick={resetPanner}\n        onMouseUp={disableDrag}\n        onTouchEnd={disableDrag}\n        onTouchCancel={disableDrag}\n        // onMouseOut={disableDrag}\n        onMouseMove={(e) => handleDrag(e)}\n        style={{\n          WebkitTransform: `rotate(${pannerDeg}deg)`,\n          MozTransform: `rotate(${pannerDeg}deg)`,\n          transform: `rotate(${pannerDeg}deg)`,\n        }}\n      >\n        <div className=\"pan-indicator\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Panner;\n","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Channel.js",["73","74"],"import React, { useState } from \"react\";\n\nimport Panner from \"./Panner\";\nimport Track from \"./Track\";\n\nconst Channel = () => {\n  const [name, setName] = useState(\"Track\");\n  const [mute, setMute] = useState(false);\n  const [solo, setSolo] = useState(false);\n  const [reverb, setReverb] = useState(false);\n  const [dBFS, setDBFS] = useState(-48);\n\n  return (\n    <div className=\"channel\">\n      <div>\n        <button\n          className={`btn mute ${mute ? \"active\" : \"\"}`}\n          onClick={() => setMute(!mute)}\n        >\n          M\n        </button>\n        <button\n          className={`btn solo ${solo ? \"active\" : \"\"}`}\n          onClick={() => setSolo(!solo)}\n        >\n          S\n        </button>\n        <button\n          className={`btn afl ${reverb ? \"active\" : \"\"}`}\n          onClick={() => setReverb(!reverb)}\n        >\n          PFL\n        </button>\n        <Panner />\n        <Track dBFS={dBFS} />\n        <p className=\"label\">{name}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Channel;\n","/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Track.js",[],"/Users/jonasbarsten/Documents/React/react-audio-mixer/src/components/Mixer.js",[],{"ruleId":"75","severity":1,"message":"76","line":21,"column":21,"nodeType":"77","messageId":"78","endLine":21,"endColumn":33},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"79","replacedBy":"83"},{"ruleId":"81","replacedBy":"84"},{"ruleId":"79","replacedBy":"85"},{"ruleId":"81","replacedBy":"86"},{"ruleId":"75","severity":1,"message":"87","line":7,"column":10,"nodeType":"77","messageId":"78","endLine":7,"endColumn":14},{"ruleId":"88","severity":1,"message":"89","line":94,"column":6,"nodeType":"90","endLine":94,"endColumn":18,"suggestions":"91"},{"ruleId":"75","severity":1,"message":"92","line":6,"column":10,"nodeType":"77","messageId":"78","endLine":6,"endColumn":13},{"ruleId":"75","severity":1,"message":"93","line":7,"column":16,"nodeType":"77","messageId":"78","endLine":7,"endColumn":23},{"ruleId":"75","severity":1,"message":"94","line":11,"column":16,"nodeType":"77","messageId":"78","endLine":11,"endColumn":23},"no-unused-vars","'setIsLoading' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["95"],"no-negated-in-lhs",["96"],["95"],["96"],["95"],["96"],"'gain' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dirty', 'peak', and 'peakTime'. Either include them or remove the dependency array.","ArrayExpression",["97"],"'pan' is assigned a value but never used.","'setName' is assigned a value but never used.","'setDBFS' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [dirty, peak, peakTime, props.dBFS]",{"range":"100","text":"101"},[2652,2664],"[dirty, peak, peakTime, props.dBFS]"]